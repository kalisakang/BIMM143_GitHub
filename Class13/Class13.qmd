---
title: "Class13: RNASeq Analysis"
author: "Kalisa Kang (PID A16741690)"
format: pdf
---

The data for today's lab comes from an old study by Himes et al., on a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects.

## Import data

We need two things for this analysis: counts and metadata. These are called "countsData" and "colData" in the DESeq2 world.

```{r}
# Complete the missing code
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
head(counts)
head(metadata)
```
The counts are organized by a gene per row and an experiment per colunn.

> Q1. How many genes are in this dataset? 

```{r}
nrow(counts)
```

> Q2. How many ‘control’ cell lines do we have? 

```{r}
sum(metadata$dex == "control")
```

```{r}
table(metadata$dex)
```

### Check on match of metadata and coldata

Check if the row IDs from metadata match the column names of colData.

```{r}
colnames(counts)
```

```{r}
head(metadata$id)
```

```{r}
metadata$id == colnames(counts)
```

If you want to know if all the elements of a vector are TRUE, then we can ues the `all()` function.

```{r}
all(c(T,T,T, F) )
```

```{r}
all(metadata$id == colnames(counts))
```


## Examine data


## Analysis

I want to start by comparing "control" and "treated" columns. To do this, I will find the average expression for each gene (row) in all "control" columns. Then I will find the average in the "treated" coluns. Then I will compare them. 

Higher gene expression means more reads mapped to the gene. More reads means there was a greater amount of mRNA transcripts in the cell, meaning that the gene was transcribed a lot hence higher gene expression.

```{r}
control.inds <- metadata$dex == "control"
```

```{r}
control.counts <- counts[,control.inds]
```

Now find the mean count value per gene using the `apply()` function.

```{r}
control.mean <- apply(control.counts, 1, mean)
```

Now do the same for the "treated" columns.

```{r}
treated.inds <- metadata$dex == "treated"
treated.counts <- counts[,treated.inds]
treated.mean <- apply(treated.counts, 1, mean)
```

Put these 2 mean vectors together for ease of book keeping.

```{r}
meancounts <- data.frame(control.mean, treated.mean)
head(meancounts)
```

Let's have a look with a quick plot.

```{r}
plot(meancounts)
```


```{r}
plot(meancounts, log="xy")
```

Genes that are lowly expressed have higher variance than the genes that are highly expressed.

```{r}
log2(20/10)
log2(40/10)
```

We most often work in log2 units because they have a more simple interpretation.

Here we calculate the log2 fold-change of treated/control values and add it to our data frame.

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean / meancounts$control.mean)
head(meancounts)
```

There are some funky answers in there like NaN (not a number) and -Inf (minus infinity) that all come because I have zero count genes in my dataset.

It's common practice to filter these zero count genes out before we go too deep.

```{r}
to.keep.inds <- (rowSums(meancounts[,1:2] == 0) == 0)

mycounts <- meancounts[to.keep.inds, ]
head(mycounts)
```

> Q. How many genes do we have left after zero count filtering?

```{r}
nrow(mycounts)
```

A common threshold for calling a gene "up" or "down" is a log2fold change of +2 or -2.

> Q. How many "up" regulated genes do we have?

```{r}
sum(mycounts$log2fc >= +2)
```

> Q. How many "down" regulated genes do we have?

```{r}
sum(mycounts$log2fc <= -2)
```

## DESeq Analysis

We need to do this analysis properly with statistics. See if the difference is statistically significant.

```{r}
#| message: false
library(DESeq2)
```

To use DESeq, we need to get our input data in a very particular format.

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts, 
                       colData = metadata, 
                       design = ~dex)
```

Run DESeq analysis

```{r}
dds <- DESeq(dds)
```
Get the results

```{r}
res <- results(dds)
head(res)
```

I want to make a figure showing an overview of all my results to date.
A plot of **log2 FC** vs the **p-value** (adjusted p-value).

```{r}
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "orange" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

abline(v=-2, col="gray")
abline(v=+2, col="gray")
abline(h=-log(0.05), col="gray")
```

```{r}
log(.5)
```

Care about the more positive (up regulated) and more negative genes (down regulated). 

## Add annotation data

We want to add on gene symbols (i.e. gene names) as well as other common identifiers from major databases for all of our genes of interest.

```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)
```

We can translate between the following IDs:

```{r}
columns(org.Hs.eg.db)
```
```{r}
head(res)
```
My IDs are in the `rownames(res)` and they are from ENSEMBL

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                keys=rownames(res),
                keytype="ENSEMBL",
                column="SYMBOL",
                multiVals="first")
head(res)

```

We also want "GENENAME" and "ENTREZID"
```{r}
res$genename <- mapIds(org.Hs.eg.db,
                keys=rownames(res),
                keytype="ENSEMBL",
                column="GENENAME",
                multiVals="first")
head(res)
```

```{r}
res$entrenz <- mapIds(org.Hs.eg.db,
                keys=rownames(res),
                keytype="ENSEMBL",
                column="ENTREZID",
                multiVals="first")
head(res)
```

Let's save our results to a new CSV file

```{r}
write.csv(res, file="myresults.csv")
```

## Pathway analysis

Here, we will use the "gage" package to do some pathway analysis (aka geneset enrichment)

```{r}
#| message: false
library(pathview)
library(gage)
library(gageData)
```

Have a peak at KEGG data. Trying to see if any of the genes are involved in pathways in the KEGG database.
```{r}
data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```
To run gage, we need to provide it with a vector of fold-change values (not our big full results table). 

```{r}
foldchanges <- res$log2FoldChange

```

Add the ENTREZ IDs as names to this vector


Add ENTREZ IDs as names to my foldchanges vector

```{r}
names(foldchanges) <- res$entrenz
head(foldchanges)
```

Now run **gage** with this input and the KEGG pathways.

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
attributes(keggres)
```

```{r}
head(keggres$less)
```
Let's have a look at the hsa05310 Asthma Pathway with our genes highlighted using the `pathview()` function.

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```
![](hsa05310.pathview.png)






