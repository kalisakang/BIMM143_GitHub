---
title: "Class07: Machine learning 1"
author: "Kalisa Kang (PID: A16741690)"
format: pdf
---

Today we will start our multi-part exploration of some key machine learning methods. We will begin with clustering - finding groupings/patterns in data, and then dimensionality reduction. 

## Clustering

Let's start with "k-means" clustering.
The main function in base R for this is `kmeans() `.

```{r}
# Make up some data
hist( rnorm(100000, mean=3) )
```


```{r}
# rnorm(30, -3) gives 30 points of a normal distribution and centers it at -3
# c() puts things in a vector form
# rev() gives the +3 values first, then -3 values next

tmp <- c(rnorm(30, -3), rnorm(30, +3))
x <- cbind(x=tmp, y=rev(tmp))
plot(x)
```

Now let's try out `kmeans()`

```{r}
km <- kmeans(x, centers=2)
km
```

```{r}
attributes(km)
```
> Q. How many points in each cluster?

```{r}
km$size
```

> Q. What component of your result object details cluster assignment/membership?

```{r}
km$cluster
```

> Q. What are centers/mean values of each cluster?

```{r}
km$centers
```

> Q. Make a plot of your data showing your clustering results (groupings/clusters and cluster centers).

```{r}
plot(x, col=c("red","blue"))
```

```{r}
# plot(x, col(1,2)) will give a plot of alternating blacks and red points. But we don't want alternating blacks and reds; instead, we each cluster of points to be different colors. So, we need a vector that has all the cluster assignments that allows it to designate a color. `km$cluster` from above gives a vector with all the point cluster assignments.

# points() adds a point to the plot. `pch` changes the point size and `cex` changes the point shape to square
plot(x, col= km$cluster)
points(km$centers, col= "green", pch=15, cex=3)
```

> Q. Run `kmeans()` again and clusterin 4 groups and plot the results.

```{r}
km4 <- kmeans(x, centers=4)
plot(x, col= km4$cluster)
points(km4$centers, col="pink", pch=15, cex=3)

```

## Hierarchical clustering

This form of clustering aims to reveal the structure in your data by progressively grouping points into an even smaller number of clusters.

The main function in base R for this is called `hclust()`. This function does not take our input data directly, but wants a "distance matrix" that details how (dis)similar all our input points are to each other. 

```{r}
# `dist(x)` is the distance matrix
hc <- hclust(dist(x))
hc
```
The print out above is not very useful (unlike that of kmeans), but there is a useful `plot()` method.

```{r}
plot(hc)
abline(h=10, col="red")
```

To get my main result (i.e., my cluster membership vector), I need to "cut" my tree using the function `cutree()`

```{r}
grps <- cutree(hc, h=10)
grps
```

```{r}
plot(x, col=grps)
```

```{r}
# I cut at height 7 to get 3 groups now.
plot(x, col=cutree(hc, h=7))
```

# Principal Component Analysis

The goal of PCA is to reduce the dimensionality of a dataset down to some smaller subset of new variables (called PCs) that are a useful bases for further analysis, like visualization, clustering, etc.

```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url, row.names = 1)
x
```

> Q1. How many rows and columns are in your new data frame named x? What R functions could you use to answer this questions?

```{r}
dim(x)
```

17 rows and 4 columns.

> Q2. Which approach to solving the ‘row-names problem’ mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?

I prefer using the row.names argument because it is more robust in ensuring that the number of columns corresponds to the actual dataset rather than the names of the rows.

> Q3: Changing what optional argument in the above barplot() function results in the following plot?

```{r}
# Changing beside=T to beside=F
barplot(as.matrix(x), beside=F, col=rainbow(nrow(x)))
```

> Q5: Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?

The so called "pairs" plot can be useful for small datasets:

```{r}
#rainbow(nrow(x))
pairs(x, col=rainbow(nrow(x)), pch=16)
```

Diagonal boxes containing the country names is the x and y axes of the plots, so we only need to read half of the plots (eg top diagonal half or bottom diagonal half). If points lie on the straight line, then that means the values are similar. Departure from the straight line means that the values are more different.

So the pairs plot is useful for small datasets, but it can be lots of work to interpret and gets intractable for larger datasets. 

So PCA to the rescue!

The main function to do PCA in base R is called `prcomp()`. This function wants the transpose of our data in this case. 

```{r}
# t(x) transposes the data
pca <-prcomp(t(x))
summary(pca)
```
```{r}
attributes(pca)
```
```{r}
pca$x
```
A major PCA result visualization is called a "PCA plot" (aka a score plot, biplot, PC1 vs PC2 plot, ordination plot)

```{r}
mycols <- c("orange", "red", "blue", "darkgreen")
plot(pca$x[,1], pca$x[,2], col= mycols, pch=16, 
     xlab="PC1", ylab="PC2")
abline(h=0, col="gray")
abline(v=0, col="gray")
```

Another important output from PCA is called the "loadings" vector or the "rotation" component - this tells us how much the original variables (the foods in this case) contribute to the new PCs.

```{r}
pca$rotation
```

PCA looks to be a super useful method for gaining some insight into high dimensional data that is difficult to examine in other ways.


# PCA of RNASeq data

## Data input

```{r}
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
```
```{r}
## Again we have to take the transpose of our data. scale= makes all the data of the same scale.
pca <- prcomp(t(rna.data), scale=TRUE)
```

```{r}
summary(pca)
```
> Q. How many genes in this dataset?

```{r}
nrow(rna.data)
```

```{r}
attributes(pca)
```
```{r}
head(pca$x)
```

I will make a main result figure using ggplot:
```{r}
library(ggplot2)
```

```{r}
res <- as.data.frame(pca$x)
```

```{r}
ggplot(res) +
  aes(PC1, PC2, col=row.names(res)) + 
  geom_point()
```

```{r}
head(res)
```

```{r}
mycols <- c(rep("blue", 5), rep("red", 5))
mycols
```

```{r}
ggplot(res) + 
  aes(x=PC1, y=PC2, label=row.names(res)) + 
  geom_point(col=mycols) +
  geom_label(col=mycols)
```

```{r}
colnames(rna.data)
```

```{r}
kmeans(pca$x[,1], centers= 2)
```












