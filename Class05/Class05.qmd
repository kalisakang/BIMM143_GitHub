---
title: "Class 5: Data visualization with ggplot2"
author: "Kalisa Kang (PID: A16741690)"
format: pdf
toc: true
---

Today we will have our first play with the **ggplot2** package - one of the most popular graphics packages on the planet.

There are many plotting systems in R. These include so-called *"base"* plotting/graphics.

```{r}
plot(cars)
```

Base plot is generally rather short code and somewhat dull plot - but it is always there for you and is fast for big datasets.


If I want to use **ggplot2**, it takes some more work.


```{r}
# ggplot(cars)
```
I need to install the package first. To do this, I can use the function `install.packages("ggplot2")`

Every time I want to use a package, I need to load it up with a `library()` call.


```{r}
library(ggplot2)
```


Now finally, I can use ggplot2.

```{r}
ggplot(cars)
```

Every ggplot has at least 3 things: 

- **data** (the data.frame with the data you want to plot)
- **aes** (the aesthetic mapping of the data to the plot)
- **geom** (how you want the plot to look i.e., points, lines, columns, etc.)

```{r}
head(cars)
```


```{r}
ggplot(cars) + 
  aes(x=speed, y=dist) + 
  geom_point() + 
  geom_smooth()
```

I want a linear model and no standard error bounds shown on my plot. I also want nicer axis labels, a title, etc.

```{r}
bp <- ggplot(cars) + 
  aes(x=speed, y=dist) + 
  geom_point()
```

```{r}
bp + geom_smooth(method = "lm", se = FALSE) + 
  labs(title="Stopping Distance of Old Cars", 
       x="Speed (MPH)",
       y="Distance (ft)",
       caption="From the cars dataset") + 
  theme_bw()
```

## A more complicated scatter plot

Here we make a plot of gene expression data:

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)

```

```{r}
head(genes)
```

> Q. Use the nrow() function to find out how many genes are in this dataset. What is your answer?

```{r}
nrow(genes)
```

> Q. Use the colnames() function and the ncol() function on the genes data frame to find out what the column names are (we will need these later) and how many columns there are. How many columns did you find?

```{r}
colnames(genes)
ncol(genes)
```

> Q. Use the table() function on the State column of this data.frame to find out how many ‘up’ regulated genes there are. What is your answer?

```{r}
table(genes$State)
```

> Q. Using your values above and 2 significant figures. What fraction of total genes is up-regulated in this dataset?

```{r}
round(sum(genes$State == "up")/nrow(genes) * 100, 2)
```

```{r}
n.gene <- nrow(genes)
n.up <- sum(genes$State == "up")

up.percent <- n.up/n.gene*100
round(up.percent, 2)
```

```{r}
head(genes, 2)
```

```{r}
ggplot(genes) + 
  aes(x=Condition1, y=Condition2, col=State) + 
  geom_point()
```

```{r}
p <- ggplot(genes) + 
  aes(x=Condition1, y=Condition2, col=State) + 
  geom_point()
```

Change the colors and add labels.

```{r}
p + scale_color_manual(values=c("blue", "gray", "red")) + labs(title="Gene Expression Changes Upon Drug Treatment", x="Control (no drug)", y="Drug treatment")
```

## Exploring the gapminder dataset

Here we will load up the gapminder dataset to get practice with different aes mappings.

```{r}
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
```

> Q. How many entry rows are in this dataset?

```{r}
nrow(gapminder)
```

> Q. How many columns?

```{r}
ncol(gapminder)
```

```{r}
dim(gapminder)
```


```{r}
head(gapminder)
```
```{r}
table(gapminder$year)
```

> Q. How many continents?

```{r}
table(gapminder$continent)
```

I can use the `unique()` function... The `length()` function tells us how many buckets there are!
```{r}
length(unique(gapminder$continent))
```

> Q. How many countries are there in this dataset?

```{r}
length(unique(gapminder$country))
```

Make a scatterplot. The `alpha()` function gives you different transparency levels, where 0 is completely transparent and 1 is not transparent. Putting `col="blue"` in the aesthetic function does not make the points blue. If you want to color by column, then put the col=column name in aes; but if you want to color everything, then put col=color in geom.

```{r}
ggplot(gapminder) + 
  aes(x=gdpPercap, y=lifeExp, col=continent, size=pop) +
  geom_point(alpha=.5)
```

```{r}
library(dplyr)

gapminder_2007 <- filter(gapminder, year==2007)

head(gapminder_2007)
```

Plot of 2007 with population and continent data

```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp, col=continent, size=pop) +
  geom_point(alpha=.5)
```

```{r}
ggplot(gapminder) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point() +
  facet_wrap(~continent)
```

